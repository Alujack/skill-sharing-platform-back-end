generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role       UserRole @default(User)
  createdAt  DateTime @default(now())
  isVerified Boolean  @default(false)
  student     Student?
  instructor  Instructor?
}

enum UserRole {
  Admin
  Instructor
  User
  Student
}

model Student {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments Enrollment[]
  wishlists   Wishlist[]
}

model Instructor {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  name       String
  bio        String?
  phone      String?
  isApproved Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[]
}

model Course {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  price        Float
  instructorId Int
  categoryId   Int
  thumbnail    String?
  isApproved   Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  instructor  Instructor   @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  enrollments Enrollment[]
  wishlists   Wishlist[]
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]
}

model Lesson {
  id       Int    @id @default(autoincrement())
  title    String
  videoUrl String
  courseId Int

  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  courseId  Int
  studentId Int
  createdAt DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, courseId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  courseId  Int
  studentId Int
  createdAt DateTime @default(now())
  
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([studentId, courseId])
}